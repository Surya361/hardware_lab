section .data

message: db "enter the number of rows",10
message1: db "enter the number of columns",10
space: db 32
enter: db 10
section .bss

rows: resw 1
columns: resw 1
num: resw 1
temp: resb 1
array: resw 100
count: resw 1
length: resw 1
array1: resw 100
count1: resw 1
countbl: resw 1
num1: resd 1
cnt: resb 1

section .text
global _start:
_start:
	mov eax,4
	mov ebx,1
	mov ecx,message
	mov edx,25
	int 80h
	call read
	mov ax,word[num]
	mov word[rows],ax
	mov eax,4
	mov ebx,1
	mov ecx,message1
	mov edx,28
	int 80h
	call read
	mov ax,word[num]
	mov word[columns],ax
	mov bx,word[rows]
	mul bx
	mov word[length],ax
	call read_array
	call transpose
	mov eax,1
	mov ebx,0
	int 80h
transpose:
	mov esi,array
	mov word[count],0
	mov word[count1],0
	mov word[countbl],0
	lo1:
		mov ax,word[columns]
		cmp ax,word[count1]
		je r
		lo2:
			mov eax,4
			mov ebx,1
			mov ecx,space
			mov edx,1
			int 80h
			mov bx,word[rows]
			cmp bx,word[countbl]
			je loo1
			movzx ebx,word[count]
			movzx eax,word[esi+2*ebx]
			mov dword[num1],eax
			call pri
			mov dx,word[columns]
			add word[count],dx
			inc word[countbl]
			jmp lo2
		loo1:
			inc word[count1]
			mov ax,word[count1]
			mov word[count],ax
			mov word[countbl],0
			mov eax,4
			mov ebx,1
			mov ecx,enter
			mov edx,1
			int 80h
			jmp lo1
		

r:
	ret

read:
	mov word[num],0
	l1:
		mov eax,3
		mov ebx,0
		mov ecx,temp
		mov edx,1
		int 80h
		cmp byte[temp],10
		je return
		cmp byte[temp],32
		je return
		sub byte[temp],30h
		mov bl,10
		mov ax,word[num]
		mul bl
		mov word[num],ax
		movzx ax,byte[temp]
		add word[num],ax
		jmp l1
	return:
		ret
read_array:
	mov word[count],0
	mov ebp,array
	l2:
		mov ax,word[length]		
		cmp word[count],ax
		je return1
		call read
		mov ax,word[num]
		movzx ebx,word[count]
		mov word[ebp+2*ebx],ax
		inc word[count]
		jmp l2
	return1:
	ret	
pri:
	mov eax,dword[num1]
	cmp eax,0
	je print
	mov edx,0
	mov eax,dword[num1]
	mov ebx,10
	div ebx
	push edx
	mov dword[num1],eax
	inc byte[cnt]
	jmp pri
	
print:
	mov bl,byte[cnt]
	cmp bl,0
	je exit
	pop eax
	mov dword[num1],eax
	add dword[num1],30h 
	mov eax,4
	mov ebx,1
	mov ecx,num1
	mov edx,1
	int 80h
	dec byte[cnt]
	jmp print
exit:
	ret
	
